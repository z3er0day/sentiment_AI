import axios from "axios";

// Вместо явного ключа используем переменную окружения
const HF_API_KEY = process.env.HUGGINGFACE_API_KEY || "";
const HF_MODEL = "facebook/bart-large-mnli";

const topics = [
  "Удобство личного кабинета",
  "Качество обслуживания",
  "Цены и тарифы",
  "Работа менеджеров",
  "Блокировка карт / аккаунтов",
  "Документооборот / отчетность",
  "Надежность компании",
  "Дополнительные услуги (мойка, шиномонтаж и т.д.)",
  "Изменение условий договора",
  "Скорость решения проблем",
  "Поддержка (служба поддержки)",
  "Сложности при подключении",
  "Вопросы по заправке / заправочных станциях",
  "Финансовые операции (овердрафт, списания)",
];

const categories = [
  "Сервис",
  "ценообразование",
  "документы",
  "технические проблемы",
  "персонал",
  "условия сотрудничества",
  "дополнительные услуги",
  "надежность компании",
];

const tagCategories = [
  "Цифровые сервисы и интерфейсы",
  "Поддержка и коммуникация",
  "Финансы и платежи",
  "Карты и доступ",
  "Топливо и АЗС",
  "Документы и отчетность",
  "Дополнительные услуги",
  "Проблемы и инциденты",
];

const positiveWords = [
  "отлично",
  "хорошо",
  "удобно",
  "рекомендую",
  "благодарю",
  "лучший",
  "быстро",
  "дружелюбно",
  "понравилось",
  "супер",
  "прекрасно",
  "замечательно",
  "профессионально",
  "качественно",
  "доступно",
  "выгодно",
  "комфортно",
  "отзывчиво",
  "вежливо",
  "своевременно",
  "оперативно",
  "положительно",
  "лояльно",
  "доброжелательно",
  "приятно",
  "эффективно",
  "без проблем",
  "отзывчивые сотрудники",
  "удобный кабинет",
  "всё понравилось",
  "все понравилось",
  "всё отлично",
  "все отлично",
  "всё хорошо",
  "все хорошо",
  "всё супер",
  "все супер",
  "всё устраивает",
  "все устраивает",
  "всё быстро",
  "все быстро",
  "всё удобно",
  "все удобно",
  "всё понятно",
  "все понятно",
  "всё доступно",
  "все доступно",
  "всё выгодно",
  "все выгодно",
  "всё комфортно",
  "все комфортно",
  "всё профессионально",
  "все профессионально",
  "всё качественно",
  "все качественно",
  "всё своевременно",
  "все своевременно",
  "всё оперативно",
  "все оперативно",
  "всё положительно",
  "все положительно",
  "всё лояльно",
  "все лояльно",
  "всё доброжелательно",
  "все доброжелательно",
  "всё приятно",
  "все приятно",
  "всё эффективно",
  "все эффективно",
  "всё без проблем",
  "все без проблем",
  "всё отзывчиво",
  "все отзывчиво",
  "всё вежливо",
  "все вежливо",
  "всё быстро",
  "все быстро",
  "всё отлично",
  "все отлично",
  "всё хорошо",
  "все хорошо",
  "всё супер",
  "все супер",
  "всё устраивает",
  "все устраивает",
  "всё удобно",
  "все удобно",
  "всё понятно",
  "все понятно",
  "всё доступно",
  "все доступно",
  "всё выгодно",
  "все выгодно",
  "всё комфортно",
  "все комфортно",
  "всё профессионально",
  "все профессионально",
  "всё качественно",
  "все качественно",
  "всё своевременно",
  "все своевременно",
  "всё оперативно",
  "все оперативно",
  "всё положительно",
  "все положительно",
  "всё лояльно",
  "все лояльно",
  "всё доброжелательно",
  "все доброжелательно",
  "всё приятно",
  "все приятно",
  "всё эффективно",
  "все эффективно",
  "всё без проблем",
  "все без проблем",
  "всё отзывчиво",
  "все отзывчиво",
  "всё вежливо",
  "все вежливо",
];
const negativeWords = [
  "плохо",
  "ужасно",
  "недоволен",
  "разочарован",
  "жалоба",
  "проблема",
  "медленно",
  "грубость",
  "не понравилось",
  "отвратительно",
  "некомпетентно",
  "недоступно",
  "дорого",
  "неудобно",
  "некачественно",
  "непрофессионально",
  "недружелюбно",
  "недостаточно",
  "не рекомендую",
  "отказ",
  "задержка",
  "ошибка",
  "блокировка",
  "блокируют",
  "отказали",
  "отказано",
  "не устраивает",
  "не советую",
  "не понравился",
  "не понравилась",
  "не понравились",
  "не понравилось",
  "не понравился сервис",
  "не понравилась компания",
  "не понравились сотрудники",
  "не понравилось обслуживание",
  "не понравился менеджер",
  "не понравилась поддержка",
  "не понравились условия",
  "не понравилось качество",
  "не понравился продукт",
  "не понравилась услуга",
  "не понравились услуги",
  "не понравилось отношение",
  "не понравился подход",
  "не понравилась работа",
  "не понравились работы",
  "не понравилось оформление",
  "не понравился процесс",
  "не понравилась процедура",
  "не понравились процедуры",
  "не понравилось взаимодействие",
  "не понравился контакт",
  "не понравилась коммуникация",
  "не понравились коммуникации",
  "не понравилось общение",
  "не понравился ответ",
  "не понравилась реакция",
  "не понравились реакции",
  "не понравилось решение",
  "не понравился результат",
  "не понравилась ситуация",
  "не понравились ситуации",
  "не понравилось состояние",
  "не понравился срок",
  "не понравилась стоимость",
  "не понравились сроки",
  "не понравилось время",
  "не понравился сервис",
  "не понравилась компания",
  "не понравились сотрудники",
  "не понравилось обслуживание",
  "не понравился менеджер",
  "не понравилась поддержка",
  "не понравились условия",
  "не понравилось качество",
  "не понравился продукт",
  "не понравилась услуга",
  "не понравились услуги",
  "не понравилось отношение",
  "не понравился подход",
  "не понравилась работа",
  "не понравились работы",
  "не понравилось оформление",
  "не понравился процесс",
  "не понравилась процедура",
  "не понравились процедуры",
  "не понравилось взаимодействие",
  "не понравился контакт",
  "не понравилась коммуникация",
  "не понравились коммуникации",
  "не понравилось общение",
  "не понравился ответ",
  "не понравилась реакция",
  "не понравились реакции",
  "не понравилось решение",
  "не понравился результат",
  "не понравилась ситуация",
  "не понравились ситуации",
  "не понравилось состояние",
  "не понравился срок",
  "не понравилась стоимость",
  "не понравились сроки",
  "не понравилось время",
  "не понравился сервис",
  "не понравилась компания",
  "не понравились сотрудники",
  "не понравилось обслуживание",
  "не понравился менеджер",
  "не понравилась поддержка",
  "не понравились условия",
  "не понравилось качество",
  "не понравился продукт",
  "не понравилась услуга",
  "не понравились услуги",
  "не понравилось отношение",
  "не понравился подход",
  "не понравилась работа",
  "не понравились работы",
  "не понравилось оформление",
  "не понравился процесс",
  "не понравилась процедура",
  "не понравились процедуры",
  "не понравилось взаимодействие",
  "не понравился контакт",
  "не понравилась коммуникация",
  "не понравились коммуникации",
  "не понравилось общение",
  "не понравился ответ",
  "не понравилась реакция",
  "не понравились реакции",
  "не понравилось решение",
  "не понравился результат",
  "не понравилась ситуация",
  "не понравились ситуации",
  "не понравилось состояние",
  "не понравился срок",
  "не понравилась стоимость",
  "не понравились сроки",
  "не понравилось время",
];

export async function analyzeTheme(text: string): Promise<string> {
  const apiUrl = `https://api-inference.huggingface.co/models/${HF_MODEL}`;
  const payload = {
    inputs: text,
    parameters: {
      candidate_labels: topics,
      multi_label: false,
    },
  };
  try {
    const response = await axios.post(apiUrl, payload, {
      headers: {
        Authorization: `Bearer ${HF_API_KEY}`,
        "Content-Type": "application/json",
      },
      timeout: 20000,
    });
    const result = response.data;
    if (result && result.labels && result.scores) {
      return result.labels[0];
    }
    if (Array.isArray(result) && result.length > 0 && result[0].label) {
      return result[0].label;
    }
    return "";
  } catch (error: any) {
    console.error(
      "HuggingFace API error:",
      error?.response?.data || error.message
    );
    throw new Error(
      "Ошибка HuggingFace API: " +
        (error?.response?.data?.error || error.message)
    );
  }
}

export async function analyzeCategory(text: string): Promise<string> {
  const apiUrl = `https://api-inference.huggingface.co/models/${HF_MODEL}`;
  const payload = {
    inputs: text,
    parameters: {
      candidate_labels: categories,
      multi_label: false,
    },
  };
  try {
    const response = await axios.post(apiUrl, payload, {
      headers: {
        Authorization: `Bearer ${HF_API_KEY}`,
        "Content-Type": "application/json",
      },
      timeout: 20000,
    });
    const result = response.data;
    if (result && result.labels && result.scores) {
      return result.labels[0];
    }
    if (Array.isArray(result) && result.length > 0 && result[0].label) {
      return result[0].label;
    }
    return "";
  } catch (error: any) {
    console.error(
      "HuggingFace API error (category):",
      error?.response?.data || error.message
    );
    throw new Error(
      "Ошибка HuggingFace API (category): " +
        (error?.response?.data?.error || error.message)
    );
  }
}

export async function analyzeTags(text: string): Promise<string[]> {
  const apiUrl = `https://api-inference.huggingface.co/models/${HF_MODEL}`;
  const payload = {
    inputs: text,
    parameters: {
      candidate_labels: tagCategories,
      multi_label: true,
    },
  };
  try {
    const response = await axios.post(apiUrl, payload, {
      headers: {
        Authorization: `Bearer ${HF_API_KEY}`,
        "Content-Type": "application/json",
      },
      timeout: 20000,
    });
    const result = response.data;
    if (result && result.labels && result.scores) {
      // Вернуть все теги с вероятностью > 0.3 (можно скорректировать порог)
      return result.labels.filter(
        (_: string, i: number) => result.scores[i] > 0.3
      );
    }
    return [];
  } catch (error: any) {
    console.error(
      "HuggingFace API error (tags):",
      error?.response?.data || error.message
    );
    throw new Error(
      "Ошибка HuggingFace API (tags): " +
        (error?.response?.data?.error || error.message)
    );
  }
}

export async function analyzeSentiment(text: string): Promise<string> {
  // Lowercase and normalize
  const normalized = text.toLowerCase();
  let positive = 0;
  let negative = 0;
  for (const word of positiveWords) {
    if (normalized.includes(word)) positive++;
  }
  for (const word of negativeWords) {
    if (normalized.includes(word)) negative++;
  }
  if (positive > 0 && negative === 0) return "Позитивный";
  if (negative > 0 && positive === 0) return "Негативный";
  if (positive > 0 && negative > 0) return "Нейтральный";
  // Fallback: if no matches, try to guess by tone (simple heuristic)
  if (
    normalized.includes("нормально") ||
    normalized.includes("средне") ||
    normalized.includes("обычно")
  )
    return "Нейтральный";
  return "Нейтральный";
}

export async function analyzePriority(text: string): Promise<string> {
  const normalized = text.toLowerCase();
  // Highest Priority
  const highestPatterns = [
    "блокир",
    "без предупреждения",
    "финансовые потери",
    "скрытые комисси",
    "скрытая комисси",
    "скрытых комисси",
    "наценк",
    "одностороннее изменение тариф",
    "одностороннее изменение условий",
    "без уведомления",
    "критическ",
    "невозможность заправки",
    "остановка бизнеса",
    "обман",
    "невыполнение обязательств",
    "расторжени",
    "возврат средств",
    "передач",
    "коллектор",
    "остался без топлива",
    "критический момент",
  ];
  for (const pattern of highestPatterns) {
    if (normalized.includes(pattern)) return "Очень важный";
  }
  // Medium Priority
  const mediumPatterns = [
    "неудобный интерфейс",
    "сбой",
    "ошибк",
    "задержк",
    "проблема с документ",
    "проблемы с документ",
    "некорректное поведение менеджер",
    "игнорирован",
    "некомпетентност",
    "долгое ожидание",
    "долгое ожидание ответа",
    "задержка доставки",
    "задержка активации",
    "несоответствие условий",
    "обещания менеджеров",
    "ожидание ответа",
    "поддержк",
  ];
  for (const pattern of mediumPatterns) {
    if (normalized.includes(pattern)) return "Важный";
  }
  // Low Priority
  const lowPatterns = [
    "положительн",
    "благодар",
    "дополнительные услуги",
    "мойк",
    "страховк",
    "долгосрочное сотрудничество",
    "без нареканий",
    "рекомендац",
    "рекомендую",
    "понравил",
    "отлично",
    "хорошо",
    "супер",
    "удобно",
    "доступно",
    "выгодно",
    "комфортно",
    "приятно",
    "эффективно",
    "без проблем",
    "отзывчив",
    "вежлив",
    "быстро",
    "качественно",
    "профессионально",
    "лояльно",
    "доброжелательно",
    "своевременно",
    "оперативно",
    "всё устраивает",
    "все устраивает",
    "всё хорошо",
    "все хорошо",
    "всё супер",
    "все супер",
    "всё отлично",
    "все отлично",
  ];
  for (const pattern of lowPatterns) {
    if (normalized.includes(pattern)) return "Обычный";
  }
  // Default fallback
  return "Обычный";
}

export async function analyzeCompetitorMention(text: string): Promise<string> {
  const normalized = text.toLowerCase();
  // Прямые упоминания конкурентов (добавьте сюда названия по мере необходимости)
  const competitors = [
    "opti24",
    "тинькофф драйв",
    "тинькофф",
    "сбер тревел",
    "сбербанк",
    "газпромнефть",
    "лукойл",
    "роснефть",
    "bp",
    "shell",
    "yandex",
    "яндекс",
    "газпром",
    "трасса",
    "атон",
    "нефтьмагистраль",
    "трасса",
    "трасса24",
    "газпромнефть",
    "газпромнефть карта",
    "газпром карта",
    "лукойл карта",
    "роснефть карта",
    "bp карта",
    "shell карта",
    "яндекс карта",
    "yandex карта",
    "ситимобил",
    "gettaxi",
    "gett",
    "drive",
    "drive карта",
    "альфа",
    "альфа банк",
    "втб",
    "втб карта",
    "открытие",
    "открытие карта",
    "совкомбанк",
    "совком",
    "уралсиб",
    "уралсиб карта",
    "промсвязьбанк",
    "промсвязь",
    "мтс банк",
    "мтс",
    "почта банк",
    "почта",
    "росбанк",
    "росбанк карта",
    "unicredit",
    "юникредит",
    "юникредит банк",
    "unicredit банк",
    "unicredit карта",
    "юникредит карта",
  ];
  for (const comp of competitors) {
    if (normalized.includes(comp)) return "TRUE";
  }
  // Косвенные указания и сравнения
  const patterns = [
    "другие решени",
    "альтернативн",
    "аналогичн",
    "другой сервис",
    "другие сервис",
    "другой банк",
    "другие банк",
    "другой платформ",
    "другие платформ",
    "другой поставщик",
    "другие поставщик",
    "другой продукт",
    "другие продукт",
    "другой компании",
    "другие компании",
    "другой организации",
    "другие организации",
    "лучше, чем",
    "хуже, чем",
    "перешли с",
    "перешёл с",
    "перешла с",
    "перешли на",
    "перешёл на",
    "перешла на",
    "раньше пользовал",
    "до этого пользовал",
    "до этого был",
    "до этого была",
    "до этого были",
    "сменил",
    "сменили",
    "сменили компанию",
    "сменили сервис",
    "сменили банк",
    "сменили платформу",
    "сменили поставщика",
    "сменили продукт",
    "сменили организацию",
    "сменили компанию",
    "перешли к вам",
    "перешёл к вам",
    "перешла к вам",
    "перешли от",
    "перешёл от",
    "перешла от",
    "сравнивал",
    "сравнивала",
    "сравнивали",
    "сравнение",
    "альтернатива",
    "альтернативы",
    "альтернативой",
    "альтернативам",
    "аналог",
    "аналогов",
    "аналогом",
    "аналогами",
    "аналогичный",
    "аналогичные",
    "аналогичная",
    "аналогичное",
    "другой вариант",
    "другие варианты",
    "другой опыт",
    "другие опыты",
    "другой подход",
    "другие подходы",
  ];
  for (const pattern of patterns) {
    if (normalized.includes(pattern)) return "TRUE";
  }
  return "FALSE";
}
